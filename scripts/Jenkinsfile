#!/usr/bin/env groovy

def systems_x86_64 = ['ubuntu-18.04','ubuntu-16.04','alpine-3.7','alpine-3.8','debian-9','debian-8','centos-7','fedora-29','opensuse-42','photon-2.0','photon-3.0'] as String[]
def systems_arm64 = ['ubuntu-18.04','ubuntu-16.04','alpine-3.7','alpine-3.8','debian-9','centos-7','fedora-29','opensuse-42','photon-3.0'] as String[]
def systems_arm32 = ['ubuntu-18.04','ubuntu-16.04','alpine-3.7','alpine-3.8','debian-9','debian-8','fedora-29'] as String[]
def targets = ['x86_64', 'arm64', 'arm32'] as String[]
def systemMap = [x86_64: systems_x86_64, arm64: systems_arm64, arm32: systems_arm32]

def checkoutStage (arch)
{
  deleteDir ()
  cleanWs (cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: false)
  checkout scm
  currentBuild.displayName = "C Utils ${arch}:${env.BUILD_ID}"
}

def buildStage (systems, arch)
{
  for (int i = 0; i < systems.size(); ++i)
  {
    def system = systems[i]
    if ("${params.System}" == "${system}" || "${params.System}" == 'all')
    {
      sh "./scripts/docker.sh ${system} ${arch} ${env.BUILD_ID}"
    }
  }
}

def metricsStage (systems, arch)
{
  publishCoreMetrics (systems, arch)
  if ("${params.System}" == 'ubuntu-18.04' || "${params.System}" == 'all')
  {
    publishAdvancedMetrics ('ubuntu-18.04', arch)
  }
}

def archiveStage (arch)
{
  if ("${params.Archive}" != 'None')
  {
    def server = Artifactory.server 'artifactory'
    publishDebs (arch, server)
    publishApks (arch, server)
    publishRpms (arch, server)
  }
}

def publishCoreMetrics (systems, arch)
{
  for (int i = 0; i < systems.size(); ++i)
  {
    if ("${params.System}" == "${systems[i]}" || "${params.System}" == 'all')
    {
      archiveArtifacts (artifacts: "${arch}/${systems[i]}/release/release.log")
      archiveArtifacts (artifacts: "${arch}/${systems[i]}/debug/debug.log")
      archiveArtifacts (artifacts: "${arch}/${systems[i]}/static/static.log")
//      archiveArtifacts (artifacts: "${arch}/${systems[i]}/release/junit-Results.xml")
    }
  }
}

def publishAdvancedMetrics (system, arch)
{
  fileOperations ([fileCopyOperation (includes: "${arch}/${system}/src/c/*.c", targetLocation: 'src/c/', flattenFiles: true),
    fileCopyOperation (includes: "${arch}/${system}/include/*.h", targetLocation: 'include/iot/', flattenFiles: true)])
  archiveArtifacts (artifacts: 'src/c/**/*.c')
  archiveArtifacts (artifacts: 'include/iot/**/*.h')
  archiveArtifacts (artifacts: "${arch}/${system}/lcov/html/**")
  archiveArtifacts (artifacts: "${arch}/${system}/release/cppcheck.xml")
  publishValgrind (pattern: '**/*_vg.xml', sourceSubstitutionPaths: '/iotech-c-utils/src:src')
  publishCppcheck (pattern: "${arch}/${system}/release/cppcheck.xml")
//  junit (testResults: "${arch}/${system}/release/junit-Results.xml")
  cobertura (coberturaReportFile: "${arch}/${system}/lcov/cobertura.xml")
//  def tasks = scanForIssues (tool: [$class: 'TaskScanner'], includePattern: '**/*.c,**/*.h')
// publishIssues (issues: [tasks])
  def gcc = scanForIssues (tool: [$class: 'Gcc4'], pattern: "${arch}/${system}/release/release.log")
  publishIssues (issues: [gcc])
}

def publishDebs (arch, server)
{
  def debs_x86_64 = ['ubuntu-18.04','ubuntu-16.04','debian-9','debian-8']
  def debs_arm64 = ['ubuntu-18.04','ubuntu-16.04','debian-9']
  def debs_arm32 = ['ubuntu-18.04','ubuntu-16.04','debian-9']
  def deb_lists = [x86_64: debs_x86_64, arm64: debs_arm64, arm32: debs_arm32]
  def deb_archs = [x86_64: 'x86_64', arm64: 'arm64', arm32: 'armhf']
  def deb_name = ['ubuntu-18.04':'bionic','ubuntu-16.04':'xenial','debian-9':'stretch','debian-8':'jessie']
  def repos = ['Release':'debian-local','Development':'debian-dev']
  def repo = repos["${params.Archive}"]
  def debs = deb_lists[arch]

  for (int i = 0; i < debs.size(); ++i)
  {
    if ("${params.System}" == "${debs[i]}" || "${params.System}" == 'all')
    {
      def name = deb_name[debs[i]]
      def uploadSpec = """{"files":[{
        "pattern": "${arch}/${debs[i]}/release/cutils*.deb",
        "target": "${repo}/pool/${name}/",
        "props": "deb.distribution=${name};deb.component=main;deb.architecture=${deb_archs[arch]}"
      }]}"""
      server.upload (uploadSpec)
    }
  }
}

def publishApks (arch, server)
{
  def apks_x86_64 = ['alpine-3.7','alpine-3.8']
  def apks_arm64 = ['alpine-3.7','alpine-3.8']
  def apks_arm32 = ['alpine-3.7','alpine-3.8']
  def apk_lists = [x86_64: apks_x86_64, arm64: apks_arm64, arm32: apks_arm32]
  def apk_archs = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armhf']
  def apks = apk_lists[arch]
  def repos = ['Release':'generic-local','Development':'generic-dev']
  def repo = repos["${params.Archive}"]

  for (int i = 0; i < apks.size(); ++i)
  {
    if ("${params.System}" == "${apks[i]}" || "${params.System}" == 'all')
    {
      sh "./scripts/package.sh ${apks[i]} ${arch}"
      def uploadSpec = """{"files":[
      {
        "pattern": "${arch}/${apks[i]}/release/cutils*.tar.gz",
        "target": "${repo}/${apks[i]}/",
        "props": "distribution=${apks[i]};architecture=${apk_archs[arch]}"
      },
      {
        "pattern": "apk/${apks[i]}/packager/${arch}/*.apk",
        "target": "alpine/${apks[i]}/${arch}/"
      }
      ]}"""
      server.upload (uploadSpec)
    }
  }
}

def publishRpms (arch, server)
{
  def rpms_x86_64 = ['centos-7','fedora-29','opensuse-42','photon-2.0','photon-3.0']
  def rpms_arm64 = ['centos-7','fedora-29','opensuse-42','photon-3.0']
  def rpms_arm32 = ['centos-7','fedora-29','opensuse-42']
  def rpm_lists = [x86_64: rpms_x86_64, arm64: rpms_arm64, arm32: rpms_arm32]
  def rpm_arch = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armhf']
  def rpms = rpm_lists[arch]
  def rpm_repo = ['centos-7':'rpm-centos7','fedora-29':'rpm-fedora29','opensuse-42':'rpm-opensuse42','photon-2.0':'rpm-photon20','photon-3.0':'rpm-photon30']

  for (int i = 0; i < rpms.size(); ++i)
  {
    if ("${params.System}" == "${rpms[i]}" || "${params.System}" == 'all')
    {
      def uploadSpec = """{"files":[{
        "pattern": "${arch}/${rpms[i]}/release/cutils*.rpm",
        "target": "${rpm_repo[rpms[i]]}",
        "props": "rpm.metadata.release=${env.BUILD_ID}"
      }]}"""
      server.upload (uploadSpec)
    }
  }
}

def buildStages (target, systems)
{
  node ("docker-${target}")
  {
    stage ("Checkout ${target}") { checkoutStage (target)}
    stage ("Build ${target}") { buildStage (systems, target) }
    stage ("Metrics ${target}") { metricsStage (systems, target) }
    stage ("Archive ${target}") { archiveStage (target) }
  }
}

buildMap = [:]
for (t in targets)
{
  def target = t
  def systems = systemMap["${target}"]
  if (("${params.Arch}" == target || "${params.Arch}" == 'all') &&
    (systems.count ("${params.System}") != 0 || "${params.System}" == 'all'))
  {
    buildMap[target] = { buildStages (target, systems) }
  }
}
buildMap.failFast = false

pipeline
{
  agent none
  parameters
  {
    choice (choices: ['None','Development','Release'], description: 'Build Archive Type', name: 'Archive')
    choice (choices: ['ubuntu-18.04','ubuntu-16.04','alpine-3.7','alpine-3.8','debian-9','debian-8','centos-7','fedora-29','opensuse-42','photon-2.0','photon-3.0','all'], description: 'System to Build', name: 'System')
    choice (choices: ['x86_64','arm64','arm32', 'all'], description: 'Build Architecture', name: 'Arch')
  }
  stages { stage ('All') { steps { script { parallel buildMap }}}}
}
