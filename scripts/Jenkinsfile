#!/usr/bin/env groovy

systems_x86_64 = ['ubuntu-19.04','ubuntu-18.04','ubuntu-16.04','alpine-3.10','alpine-3.9','debian-10','debian-9','debian-8','fedora-30','opensuse-15','photon-30','zephyr-1.14','clearlinux'] as String[]
systems_arm64 = ['ubuntu-19.04','ubuntu-18.04','ubuntu-16.04','alpine-3.10','alpine-3.9','debian-10','debian-9','fedora-30','opensuse-15','photon-30'] as String[]
systems_arm32 = ['ubuntu-19.04','ubuntu-18.04','ubuntu-16.04','alpine-3.10','alpine-3.9','debian-10','debian-9','debian-8','opensuse-15'] as String[]
targets = ['x86_64', 'arm64', 'arm32'] as String[]
systemMap = [x86_64: systems_x86_64, arm64: systems_arm64, arm32: systems_arm32]
releaseType = ['None':'dev', 'Release':'release', 'Development':'dev']

def checkoutStage (arch)
{
  currentBuild.displayName = "IOT ${env.BUILD_ID}"
  cleanWs (cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true)
  checkout scm
}

def buildStage (systems, arch)
{
  for (int i = 0; i < systems.size(); ++i)
  {
    def system = systems[i]
    if ("${params.System}" == "${system}" || "${params.System}" == 'all')
    {
      sh "./scripts/docker.sh ${system} ${arch} ${env.BUILD_ID} ${params.Board}"
    }
  }
}

def metricsStage (systems, arch)
{
  publishCoreMetrics (systems, arch)
  if ("${params.System}" == 'ubuntu-19.04' || "${params.System}" == 'all')
  {
    publishAdvancedMetrics ('ubuntu-19.04', arch)
  }
}

def archiveStage (arch)
{
  if ("${params.Archive}" != 'None')
  {
    publishDebs (arch)
    publishApks (arch)
    publishRpms (arch)
    publishTars (arch)
  }
}

def publishMetric (file)
{
  if (fileExists (file))
  {
    archiveArtifacts (artifacts: file)
  }
}

def publishCoreMetrics (systems, arch)
{
  for (int i = 0; i < systems.size(); ++i)
  {
    if ("${params.System}" == "${systems[i]}" || "${params.System}" == 'all')
    {
      publishMetric ("${arch}/${systems[i]}/release/release.log")
      publishMetric ("${arch}/${systems[i]}/debug/debug.log")
      publishMetric ("${arch}/${systems[i]}/release/junit-Results.xml")
    }
  }
}

def publishAdvancedMetrics (system, arch)
{
  fileOperations ([fileCopyOperation (includes: "${arch}/${system}/src/c/*.c", targetLocation: 'src/c/', flattenFiles: true),
    fileCopyOperation (includes: "${arch}/${system}/include/*.h", targetLocation: 'include/iot/', flattenFiles: true)])
  publishValgrind (pattern: '**/*_vg.xml', sourceSubstitutionPaths: '/iotech-iot/src:src')
  junit (testResults: "${arch}/${system}/release/junit-Results.xml")
  cobertura (coberturaReportFile: "${arch}/${system}/lcov/cobertura.xml")
  archiveArtifacts (artifacts: "${arch}/${system}/lcov/cobertura.xml")
  archiveArtifacts (artifacts: "${arch}/${system}/lcov/html/**")
  // publishCoverage (adapters: [coberturaAdapter("${arch}/${system}/lcov/cobertura.xml")], sourceFileResolver: sourceFiles('NEVER_STORE'))
  recordIssues (tools: [cppCheck (id: "CppCheck-${arch}-${env.BUILD_ID}", pattern: "${arch}/${system}/release/cppcheck.xml")])
  recordIssues (tools: [taskScanner (id: "TaskScan-${arch}-${env.BUILD_ID}", highTags: 'FIXME', includePattern: '**/*.c,**/*.h', lowTags: 'COMMENT', normalTags: 'TODO')])
  recordIssues (tools: [gcc (id: "GCC-${arch}-${env.BUILD_ID}", pattern: "${arch}/${system}/release/release.log")])
}

def publishDebs (arch)
{
  def debs_x86_64 = ['ubuntu-19.04','ubuntu-18.04','ubuntu-16.04','debian-10','debian-9','debian-8']
  def debs_arm64 = ['ubuntu-19.04','ubuntu-18.04','ubuntu-16.04','debian-10','debian-9']
  def debs_arm32 = ['ubuntu-19.04','ubuntu-18.04','ubuntu-16.04','debian-10','debian-9','debian-8']
  def deb_lists = [x86_64: debs_x86_64, arm64: debs_arm64, arm32: debs_arm32]
  def deb_archs = [x86_64: 'amd64', arm64: 'arm64', arm32: 'armhf']
  def deb_name = ['ubuntu-19.04':'disco','ubuntu-18.04':'bionic','ubuntu-16.04':'xenial','debian-10':'buster','debian-9':'stretch','debian-8':'jessie']
  def debs = deb_lists[arch]

  for (int i = 0; i < debs.size(); ++i)
  {
    if ("${params.System}" == "${debs[i]}" || "${params.System}" == 'all')
    {
      def name = deb_name[debs[i]]
      def uploadSpec = """{"files":[{
        "pattern": "${arch}/${debs[i]}/release/iotech-iot*.deb",
        "target": "debian-${releaseType[params.Archive]}/pool/${name}/",
        "props": "deb.distribution=${name};deb.component=main;deb.architecture=${deb_archs[arch]}"
      }]}"""
      rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
    }
  }
}

def publishApks (arch)
{
  def apks_x86_64 = ['alpine-3.10','alpine-3.9']
  def apks_arm64 = ['alpine-3.10','alpine-3.9']
  def apks_arm32 = ['alpine-3.10','alpine-3.9']
  def apk_lists = [x86_64: apks_x86_64, arm64: apks_arm64, arm32: apks_arm32]
  def apk_archs = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armv7']
  def apks = apk_lists[arch]

  for (int i = 0; i < apks.size(); ++i)
  {
    if ("${params.System}" == "${apks[i]}" || "${params.System}" == 'all')
    {
      sh "./scripts/package.sh ${apks[i]} ${apk_archs[arch]}"
      def uploadSpec = """{"files":[
      {
        "pattern": "apk/${apks[i]}/packager/${apk_archs[arch]}/*.apk",
        "target": "alpine/${apks[i]}/${apk_archs[arch]}/",
        "props": "distribution=${apks[i]};architecture=${apk_archs[arch]}"
      }
      ]}"""
      rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
    }
  }
}

def publishRpms (arch)
{
  def rpms_x86_64 = ['fedora-30','opensuse-15','photon-30']
  def rpms_arm64 = ['fedora-30','opensuse-15','photon-30']
  def rpms_arm32 = ['opensuse-15']
  def rpm_lists = [x86_64: rpms_x86_64, arm64: rpms_arm64, arm32: rpms_arm32]
  def rpm_arch = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armhf']
  def rpms = rpm_lists[arch]

  for (int i = 0; i < rpms.size(); ++i)
  {
    if ("${params.System}" == "${rpms[i]}" || "${params.System}" == 'all')
    {
      def uploadSpec = """{"files":[{
        "pattern": "${arch}/${rpms[i]}/release/iotech-iot*.rpm",
        "target": "rpm-${rpms[i]}-${releaseType[params.Archive]}",
        "props": "rpm.metadata.release=${env.BUILD_ID}"
      }]}"""
      rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
    }
  }
}

def publishTars (arch)
{
  def tars_x86_64 = ['alpine-3.10','alpine-3.9','zephyr-1.14','clearlinux']
  def tars_arm64 = ['alpine-3.10','alpine-3.9']
  def tars_arm32 = ['alpine-3.10','alpine-3.9']
  def tar_lists = [x86_64: tars_x86_64, arm64: tars_arm64, arm32: tars_arm32]
  def tar_archs = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armv7']
  def tars = tar_lists[arch]

  for (int i = 0; i < tars.size(); ++i)
  {
    if ("${params.System}" == "${tars[i]}" || "${params.System}" == 'all')
    {
      def uploadSpec = """{"files":[
      {
        "pattern": "${arch}/${tars[i]}/release/iotech-iot*.tar.gz",
        "target": "generic-${releaseType[params.Archive]}/${tars[i]}/",
        "props": "distribution=${tars[i]};architecture=${tar_archs[arch]}"
      }
      ]}"""
      rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
    }
  }
}

def buildStages (target, systems)
{
  node ("docker-${target}")
  {
    stage ("Checkout ${target}") { checkoutStage (target)}
    stage ("Build ${target}") { buildStage (systems, target) }
    stage ("Metrics ${target}") { metricsStage (systems, target) }
    stage ("Archive ${target}") { archiveStage (target) }
  }
}

buildMap = [:]
for (t in targets)
{
  def target = t
  def systems = systemMap["${target}"]
  if (("${params.Arch}" == target || "${params.Arch}" == 'all') && (systems.count ("${params.System}") != 0 || "${params.System}" == 'all'))
  {
    buildMap[target] = { buildStages (target, systems) }
  }
}
buildMap.failFast = false

pipeline
{
  agent none
  options
  {
    buildDiscarder (logRotator (numToKeepStr: '10'))
    timeout (time: 90, unit: 'MINUTES')
  }
  triggers
  {
    issueCommentTrigger ('.*recheck.*')
  }
  parameters
  {
    choice (name: 'Archive', choices: ['None','Development','Release'], description: 'Build Archive Type')
    choice (name: 'System', choices: ['ubuntu-19.04','ubuntu-18.04','ubuntu-16.04','alpine-3.10','alpine-3.9','debian-10','debian-9','debian-8','fedora-30','opensuse-15','photon-30','zephyr-1.14','clearlinux','all'], description: 'System to Build')
    choice (name: 'Arch', choices: ['x86_64','arm64','arm32', 'all'], description: 'Build Host Architecture')
    choice (name: 'Board', choices: ['None','frdm_k64f','native_posix','all'], description: 'Target Board')
  }
  stages { stage ('All') { steps { script { parallel buildMap }}}}
}
