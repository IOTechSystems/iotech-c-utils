#!/usr/bin/env groovy

def systems_x86_64 = ['ubuntu-24.04','ubuntu-22.04','ubuntu-20.04','ubuntu-18.04','alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16','debian-12','debian-11','debian-10','fedora-40','oraclelinux-9','opensuse-15.5','photon-40','zephyr-2.3','clearlinux','azuresphere-15','yocto-riscv'] as String[]
def systems_arm64 = ['ubuntu-24.04','ubuntu-22.04','ubuntu-20.04','ubuntu-18.04','alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16','debian-12','debian-11','debian-10','fedora-40','oraclelinux-9','opensuse-15.5','photon-40'] as String[]
def systems_arm32 = ['ubuntu-24.04','ubuntu-22.04','ubuntu-20.04','ubuntu-18.04','alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16','debian-12','debian-11','debian-10','opensuse-15.5'] as String[]
def systems_x86 = ['alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16','debian-12','debian-11','debian-10']
def targets = ['x86_64','arm64','arm32','x86'] as String[]

def String getReleaseName (archive)
{
  def releaseType = ['None':'dev', 'Release':'release', 'Development':'dev']
  return releaseType[archive]
}

def checkoutStage (arch)
{
  currentBuild.displayName = "IOT ${env.BUILD_ID}"
  cleanWs (cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenSuccess: true)
  checkout scm
}

def buildStage (systems, arch)
{
  def sys = getSystemParam ()
  def board = getTargetParam ()
  def nat = getNativeParam ()
  def sq = getSonarQubeParam ()
  def sonar = 'false'

  if (("${sq}" == 'true' || env.BRANCH_NAME.startsWith ('PR')) && ("${sys}" == 'ubuntu-24.04') && ("${arch}" == 'x86_64'))
  {
    sonar = 'true'
  }

  for (int i = 0; i < systems.size(); ++i)
  {
    def system = systems[i]
    if ("${sys}" == "${system}" || "${sys}" == 'all')
    {
      withCredentials ([
        file (credentialsId: 'AlpinePackagerRSAPrivateKey', variable: 'AlpinePackagerRSAPrivateKey'),
        file (credentialsId: 'AlpinePackagerRSAPublicKey', variable: 'AlpinePackagerRSAPublicKey')
      ])
      {
        sh (script: "./scripts/auth.sh ${system} ${sonar}")
      }
      if ("${nat}" == 'true')
      {
        sh (script: "./scripts/wrapper.sh ./scripts/linux.sh -utest")
      }
      else
      {
        if ("${sonar}" == 'true')
        {
          withSonarQubeEnv (credentialsId: 'ebe4f605-efe9-43ef-b388-607050ee29ce')
          {
            sh (script: "./scripts/docker.sh ${system} ${arch} ${board} ${sonar} ${env.BRANCH_NAME}")
            sh (script: "mv ${arch}/${sys}/lcov/sonar/report-task.txt .")
          }
          timeout (time: 5, unit: 'MINUTES')
          {
            def qg = waitForQualityGate ()
            if (qg.status != 'OK')
            {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }
        else
        {
          sh (script: "./scripts/docker.sh ${system} ${arch} ${board} ${sonar} ${env.BRANCH_NAME}")
        }
      }
    }
  }
}

def metricsStage (systems, arch)
{
  def sys = getSystemParam ()
  def archive = getArchiveParam ()
  publishCoreMetrics (systems, arch)
  if ("${sys}" == 'ubuntu-24.04' || "${sys}" == 'all')
  {
    publishAdvancedMetrics ('ubuntu-24.04', arch)
  }
  if ("${archive}" == 'Release')
  {
    publishQuality (systems, arch);
  }
}

def archiveStage (arch)
{
  def archive = getArchiveParam ()
  if ("${archive}" != 'None')
  {
    publishTars (arch)
    publishDebs (arch)
    publishApks (arch)
    publishRpms (arch)
  }
}

def publishToArtifactory (system, arch, ver, pat)
{
  def uploadSpec = """{"files":[
  {
    "pattern": "${arch}/${system}/${pat}",
    "target": "quality/iot/${ver}/${system}/",
    "props": "distribution=${system};architecture=${arch}"
  }]}"""
  rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
}

def publishQuality (systems, arch)
{
  def sys = getSystemParam ()
  def vers = sh (script: "cat ./VERSION", returnStdout: true)
  def ver = vers.trim ()
  for (int i = 0; i < systems.size(); ++i)
  {
    if ("${sys}" == "${systems[i]}" || "${sys}" == 'all')
    {
      def system = systems[i]
      publishToArtifactory (system, arch, ver, 'release/release.log')
      publishToArtifactory (system, arch, ver, 'debug/debug.log')
      publishToArtifactory (system, arch, ver, 'release/junit-Results.xml')
    }
  }
}

def publishMetric (file)
{
  if (fileExists (file))
  {
    archiveArtifacts (artifacts: file)
  }
}

def publishCoreMetrics (systems, arch)
{
  def sys = getSystemParam ()
  for (int i = 0; i < systems.size(); ++i)
  {
    if ("${sys}" == "${systems[i]}" || "${sys}" == 'all')
    {
      publishMetric ("${arch}/${systems[i]}/release/release.log")
      publishMetric ("${arch}/${systems[i]}/debug/debug.log")
      publishMetric ("${arch}/${systems[i]}/release/junit-Results.xml")
    }
  }
}

def publishAdvancedMetrics (system, arch)
{
  junit (testResults: "${arch}/${system}/release/junit-Results.xml")
  archiveArtifacts (artifacts: "${arch}/${system}/lcov/html/**")
  recordIssues (tools: [taskScanner (id: "Tasks-${arch}-${env.BUILD_ID}", highTags: 'FIXME', includePattern: '**/*.c', normalTags: 'TODO')])
  recordIssues (tools: [cppCheck (id: "CppCheck-${arch}-${env.BUILD_ID}", pattern: "${arch}/${system}/release/cppcheck.xml")])
  recordIssues (tools: [gcc (id: "GCC-${arch}-${env.BUILD_ID}", pattern: "${arch}/${system}/release/release.log")])
}

def publishDebs (arch)
{
  def debs_x86_64 = ['ubuntu-24.04','ubuntu-22.04','ubuntu-20.04','ubuntu-18.04','debian-12','debian-11','debian-10','azuresphere-15','yocto-riscv']
  def debs_arm64 = ['ubuntu-24.04','ubuntu-22.04','ubuntu-20.04','ubuntu-18.04','debian-12','debian-11','debian-10']
  def debs_arm32 = ['ubuntu-24.04','ubuntu-22.04','ubuntu-20.04','ubuntu-18.04','debian-12','debian-11','debian-10']
  def debs_x86 = ['debian-12','debian-11','debian-10']
  def deb_lists = [x86_64: debs_x86_64, arm64: debs_arm64, arm32: debs_arm32, x86: debs_x86]
  def deb_archs = [x86_64: 'amd64', arm64: 'arm64', arm32: 'armhf', x86: 'i386']
  def deb_name = ['ubuntu-24.04':'noble','ubuntu-22.04':'jammy','ubuntu-20.04':'focal','ubuntu-18.04':'bionic','debian-12':'bookworm','debian-11':'bullseye','debian-10':'buster','azuresphere-15':'jammy','yocto-riscv':'jammy']
  def debs = deb_lists[arch]
  def sys = getSystemParam ()
  def archive = getArchiveParam ()
  def releaseName = getReleaseName (archive)

  for (int i = 0; i < debs.size(); ++i)
  {
    if ("${sys}" == "${debs[i]}" || "${sys}" == 'all')
    {
      def name = deb_name[debs[i]]
      def uploadSpec = """{"files":[
      {
        "pattern": "${arch}/${debs[i]}/release/iotech*iot*.deb",
        "target": "debian-${releaseName}/pool/${name}/",
        "props": "deb.distribution=${name};deb.component=main;deb.architecture=${deb_archs[arch]}"
      },
      {
        "pattern": "${arch}/${debs[i]}/debug/iotech*iot*.deb",
        "target": "debian-${releaseName}/pool/${name}/",
        "props": "deb.distribution=${name};deb.component=main;deb.architecture=${deb_archs[arch]}"
      }
      ]}"""
      rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
    }
  }
}

def publishApks (arch)
{
  def apks_x86_64 = ['alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16']
  def apks_arm64 = ['alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16']
  def apks_arm32 = ['alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16']
  def apks_x86 = ['alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16']
  def apk_lists = [x86_64: apks_x86_64, arm64: apks_arm64, arm32: apks_arm32, x86: apks_x86]
  def apk_archs = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armv7', x86: 'x86']
  def host_archs = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armv7', x86: 'x86']
  def apk_vers = ['alpine-3.21':'v3.21','alpine-3.20':'v3.20','alpine-3.19':'v3.19','alpine-3.18':'v3.18','alpine-3.17':'v3.17','alpine-3.16':'v3.16']
  def apk_arch = apk_archs[arch]
  def harch = host_archs[arch]
  def apks = apk_lists[arch]
  def sys = getSystemParam ()
  def archive = getArchiveParam ()
  def releaseName = getReleaseName (archive)
  def repo = "alpine-${releaseName}"

  for (int i = 0; i < apks.size(); ++i)
  {
    if ("${sys}" == "${apks[i]}" || "${sys}" == 'all')
    {
      def uploadSpec = """{"files":[
      {
        "pattern": "${arch}/${apks[i]}/apks/*.apk",
        "target": "${repo}/${apk_vers[apks[i]]}/main/${apk_arch}/",
        "props": "distribution=${apks[i]};architecture=${apk_arch}"
      }
      ]}"""
      rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
    }
  }
}

def publishRpms (arch)
{
  def rpms_x86_64 = ['fedora-40','opensuse-15.5','photon-40','oraclelinux-9']
  def rpms_arm64 = ['fedora-40','opensuse-15.5','photon-40','oraclelinux-9']
  def rpms_arm32 = ['opensuse-15.5']
  def rpms_x86 = []
  def rpm_lists = [x86_64: rpms_x86_64, arm64: rpms_arm64, arm32: rpms_arm32, x86: rpms_x86]
  def rpm_arch = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armhf']
  def rpms = rpm_lists[arch]
  def sys = getSystemParam ()
  def archive = getArchiveParam ()
  def releaseName = getReleaseName (archive)

  for (int i = 0; i < rpms.size(); ++i)
  {
    if ("${sys}" == "${rpms[i]}" || "${sys}" == 'all')
    {
      def uploadSpec = """{"files":[
      {
        "pattern": "${arch}/${rpms[i]}/release/iotech-iot*.rpm",
        "target": "rpm-${rpms[i]}-${releaseName}",
        "props": "rpm.metadata.release=${env.BUILD_ID}"
      },
      {
        "pattern": "${arch}/${rpms[i]}/debug/iotech-iot-*-dbg*.rpm",
        "target": "rpm-${rpms[i]}-${releaseName}",
        "props": "rpm.metadata.release=${env.BUILD_ID}"
      }
      ]}"""
      rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
    }
  }
}

def publishTars (arch)
{
  def tars_x86_64 = ['zephyr-2.3','clearlinux']
  def tars_arm64 = []
  def tars_arm32 = []
  def tars_x86 = []
  def tar_lists = [x86_64: tars_x86_64, arm64: tars_arm64, arm32: tars_arm32, x86: tars_x86]
  def tar_archs = [x86_64: 'x86_64', arm64: 'aarch64', arm32: 'armv7', x86: 'x86']
  def tars = tar_lists[arch]
  def sys = getSystemParam ()
  def archive = getArchiveParam ()
  def releaseName = getReleaseName (archive)

  for (int i = 0; i < tars.size(); ++i)
  {
    if ("${sys}" == "${tars[i]}" || "${sys}" == 'all')
    {
      def uploadSpec = """{"files":[
      {
        "pattern": "${arch}/${tars[i]}/release/iotech-iot*.tar.gz",
        "target": "generic-${releaseName}/${tars[i]}/",
        "props": "distribution=${tars[i]};architecture=${tar_archs[arch]}"
      },
      {
        "pattern": "${arch}/${tars[i]}/debug/iotech-iot-dev*.tar.gz",
        "target": "generic-${releaseName}/${tars[i]}/",
        "props": "distribution=${tars[i]};architecture=${tar_archs[arch]}"
      }
      ]}"""
      rtUpload (serverId: 'artifactory', spec: "${uploadSpec}")
    }
  }
}

def buildStages (target, systems)
{
  def nat = getNativeParam ()
  def sys = 'docker'
  if ("${nat}" == 'true')
  {
    sys = getSystemParam ()
  }
  def host = "${sys}-${target}"

  node (host)
  {
    stage ("Checkout ${target}") { checkoutStage (target)}
    stage ("Build ${target}") { buildStage (systems, target) }
    stage ("Metrics ${target}") { metricsStage (systems, target) }
    stage ("Archive ${target}") { archiveStage (target) }
  }
}

def String getSystemParam ()
{
  def ret = "${params.System}"
  if ("${ret}" == 'null')
  {
    ret = 'ubuntu-24.04'
  }
  return ret
}

def String getArchParam ()
{
  def ret = "${params.Arch}"
  if ("${ret}" == 'null')
  {
    ret = 'x86_64'
  }
  return ret
}

def String getArchiveParam ()
{
  def ret = "${params.Archive}"
  if ("${ret}" == 'null')
  {
    ret = 'None'
  }
  return ret
}

def String getTargetParam ()
{
  def ret = "${params.Target}"
  if ("${ret}" == 'null')
  {
    ret = 'None'
  }
  return ret
}

def String getNativeParam ()
{
  def ret = "${params.Native}"
  if ("${ret}" == 'null')
  {
    ret = 'false'
  }
  return ret
}

def String getSonarQubeParam ()
{
  def ret = "${params.SonarQube}"
  if ("${ret}" == 'null')
  {
    ret = 'false'
  }
  return ret
}

def buildMap = [:]
for (t in targets)
{
  def arch_system_map = [x86_64: systems_x86_64, arm64: systems_arm64, arm32: systems_arm32, x86: systems_x86]
  def target = t
  def sys = getSystemParam ()
  def arch = getArchParam ()
  def systems = arch_system_map["${target}"]

  if (("${arch}" == target || "${arch}" == 'all') && ("${sys}" == 'all' || systems.count ("${sys}") != 0))
  {
    buildMap[target] = { buildStages (target, systems) }
  }
}
buildMap.failFast = false

pipeline
{
  agent none
  options
  {
    buildDiscarder (logRotator (numToKeepStr: '10'))
    timeout (time: 90, unit: 'MINUTES')
  }
  triggers
  {
    issueCommentTrigger ('.*recheck.*')
  }
  parameters
  {
    choice (name: 'Archive', choices: ['None','Development','Release'], description: 'Build Archive Type')
    choice (name: 'System', choices: ['ubuntu-24.04','ubuntu-22.04','ubuntu-20.04','ubuntu-18.04','alpine-3.21','alpine-3.20','alpine-3.19','alpine-3.18','alpine-3.17','alpine-3.16','debian-12','debian-11','debian-10','fedora-40','oraclelinux-9','opensuse-15.5','photon-40','zephyr-2.3','clearlinux','azuresphere-15','yocto-riscv','all'], description: 'System to Build')
    choice (name: 'Arch', choices: ['x86_64','x86','arm64','arm32','all'], description: 'Build Host Architecture')
    choice (name: 'Target', choices: ['None','frdm_k64f','qemu_x86','riscv64-oe','riscv32-oe','acrn','all'], description: 'Target System')
    booleanParam (name: 'Native', defaultValue: false, description: 'Build on host not in container')
    booleanParam (name: 'SonarQube', defaultValue: false, description: 'Run SonarQube (only for ubuntu-24.04 x86_64)')
  }
  stages { stage ('All') { steps { script { parallel buildMap }}}}
}
