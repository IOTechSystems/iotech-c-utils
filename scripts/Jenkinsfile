#!/usr/bin/env groovy

node ("${env.SLAVE}")
{
  def arch
  def real_arch
  stage ("Checkout")
  {
    checkout scm
    arch = sh (script: './scripts/arch.sh', returnStdout: true)
    real_arch = sh (script: './scripts/arch.sh true', returnStdout: true)
    currentBuild.displayName = "IOTech C Utils ${arch}: ${env.BUILD_ID}"
  }
  stage ("Build")
  {
    sh "./scripts/docker.sh ${arch} ${env.QUICK}"
  }
  stage ("Package")
  {
    sh "./scripts/package.sh ${arch} ${env.QUICK}"
  }
  stage ("Metrics")
  {
    archiveArtifacts artifacts: "build/ubuntu-18.04/release/release.log"
    archiveArtifacts artifacts: "build/ubuntu-18.04/debug/debug.log"
    if (env.QUICK == "false")
    {
      archiveArtifacts artifacts: "build/ubuntu-16.04/release/release.log"
      archiveArtifacts artifacts: "build/ubuntu-16.04/debug/debug.log"
      archiveArtifacts artifacts: "build/debian-9/release/release.log"
      archiveArtifacts artifacts: "build/debian-9/debug/debug.log"
      archiveArtifacts artifacts: "build/alpine-3.7/release/release.log"
      archiveArtifacts artifacts: "build/alpine-3.7/debug/debug.log"
      archiveArtifacts artifacts: "build/alpine-3.8/release/release.log"
      archiveArtifacts artifacts: "build/alpine-3.8/debug/debug.log"
      archiveArtifacts artifacts: "build/fedora-27/release/release.log"
      archiveArtifacts artifacts: "build/fedora-27/debug/debug.log"
      if (arch != "arm64")
      {
        archiveArtifacts artifacts: "build/debian-8/release/release.log"
        archiveArtifacts artifacts: "build/debian-8/debug/debug.log"
      }
      if (arch != "arm")
      {
        archiveArtifacts artifacts: "build/centos-7/release/release.log"
        archiveArtifacts artifacts: "build/centos-7/debug/debug.log"
        archiveArtifacts artifacts: "build/opensuse-42.3/release/release.log"
        archiveArtifacts artifacts: "build/opensuse-42.3/debug/debug.log"
      }
      if (arch == "x86_64")
      {
        archiveArtifacts artifacts: "build/photon-2.0/release/release.log"
        archiveArtifacts artifacts: "build/photon-2.0/debug/debug.log"
      }
    }
  }
  stage ("Archive")
  {
    if (env.ARCHIVE && (env.ARTIFACTORY != "none"))
    {
      def server = Artifactory.server '${env.ARTIFACTORY}'
      def ext = "tar.gz"
      def uploadSpec = 
      """{
        "files":
        [
          {
            "pattern": "build/ubuntu-18.04/release/iotech-c-util*.${ext}",
            "target": "generic-local/iotech-c-util/ubuntu-18.04/${arch}/"
          },
          {
            "pattern": "apk/alpine-3.8/packager/${real_arch}/*.apk",
            "target": "alpine-local/${real_arch}/"
          }
        ]
      }"""
      server.upload (uploadSpec)
    }
  }
  stage ("Index")
  {
    build (job: 'APK-Packaging-INDEX', parameters: [string (name: 'SLAVE', value: 'docker-x86_64'), string (name: 'BUILD', value: 
'heads/master')])
  }
  stage ("Clean")
  {
    cleanWs ()
  }
}
