if ("${LINUX_SYS}" STREQUAL "AzureSphere")
  cmake_minimum_required (VERSION 3.10)
  project (IOT LANGUAGES C)
  azsphere_configure_tools (TOOLS_REVISION "${AZURE_SPHERE_SDK}")
  azsphere_configure_api (TARGET_API_SET "${AZURE_SPHERE_TARGET_API_SET}")
  set (AZURESPHERE_API "${AZURE_SPHERE_TARGET_API_SET}")
  set (IOT_BUILD_XML OFF)
  set (IOT_BUILD_UUID ON)
else ()
  cmake_minimum_required (VERSION 3.1)
  project (IOT LANGUAGES C CXX)
  set (CMAKE_CXX_STANDARD 11)
  set (IOT_BUILD_XML ON)
  set (IOT_BUILD_UUID OFF)
endif ()
set (CMAKE_C_STANDARD 11)

# Package support

set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)

# Versioning

file (STRINGS ${CMAKE_SOURCE_DIR}/../VERSION IOT_DOT_VERSION)
string (REGEX REPLACE "....$" "" VERSION_MAJOR ${IOT_DOT_VERSION})
string (REGEX REPLACE "..$" "" VERSION_MINOR ${IOT_DOT_VERSION})
string (REGEX REPLACE "^.." "" VERSION_MINOR ${VERSION_MINOR})
string (REGEX REPLACE "^...." "" VERSION_PATCH ${IOT_DOT_VERSION})

# Configuration variables
set (IOT_BUILD_COMPONENTS ON CACHE BOOL "Build component support")
set (IOT_BUILD_DYNAMIC_LOAD ON CACHE BOOL "Build dynamic library load support")
set (IOT_BUILD_LCOV OFF CACHE BOOL "Build LCov")
set (IOT_BUILD_STATIC ON CACHE BOOL "Build static libraries")
set (IOT_BUILD_SHARED ON CACHE BOOL "Build shared libraries")
set (IOT_BUILD_EXES ON CACHE BOOL "Build executables")
set (IOT_BUILD_DOCS ON CACHE BOOL "Build docs")

set (IOT_HAS_XML ${IOT_BUILD_XML})

# Write iot/defs.h with version and build options (IOT_HAS_XXX)

file (REMOVE "${CMAKE_SOURCE_DIR}/../include/iot/defs.h")
configure_file ("${CMAKE_SOURCE_DIR}/c/defs.h.in" "${CMAKE_SOURCE_DIR}/../include/iot/defs.h")

# Configure for different target systems

set (OS_ARCH x86_64)
set (CPACK_GENERATOR TGZ)

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  set (CPACK_GENERATOR ZIP)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
  set (CPACK_GENERATOR TGZ)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Generic")
  if ("${LINUX_SYS}" STREQUAL "AzureSphere")
    set (IOT_BUILD_SHARED OFF)
    set (IOT_BUILD_DYNAMIC_LOAD OFF)
    set (IOT_BUILD_EXES OFF)
    set (IOT_BUILD_DOCS OFF)
    set (IOT_BUILD_XML OFF)
    execute_process (COMMAND dpkg --print-architecture OUTPUT_VARIABLE OS_ARCH OUTPUT_STRIP_TRAILING_WHITESPACE)
  else ()
    set (CPACK_GENERATOR TGZ)
  endif ()
else ()
  if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    execute_process (COMMAND uname -m OUTPUT_VARIABLE UNAME_M OUTPUT_STRIP_TRAILING_WHITESPACE)
    if (${UNAME_M} STREQUAL "aarch64")
      set (OS_ARCH arm64)
    elseif (${UNAME_M} STREQUAL "armv7l")
      set (OS_ARCH armhf)
    endif ()
    if (EXISTS /etc/os-release)
      file (STRINGS /etc/os-release RELEASE_ID REGEX "ID=")
      file (STRINGS /etc/os-release RELEASE_VERSION REGEX "VERSION_ID=")
      string (REGEX REPLACE "VERSION_ID=" "" RELEASE_VERSION ${RELEASE_VERSION})
      string (REGEX REPLACE "\"" "" RELEASE_VERSION ${RELEASE_VERSION})
    endif ()
    if (${UNAME_M} STREQUAL "aarch64")
      set (OS_ARCH arm64)
    elseif (${UNAME_M} STREQUAL "armv7l")
      set (OS_ARCH armhf)
    elseif (${UNAME_M} STREQUAL "i686")
      set (OS_ARCH x86)
    endif ()
    if (EXISTS /etc/alpine-release)
      if (${OS_ARCH} STREQUAL "arm64")
        set (OS_ARCH aarch64)
      elseif (${OS_ARCH} STREQUAL "armhf")
        set (OS_ARCH armv7)
      elseif (${OS_ARCH} STREQUAL "i686")
        set (OS_ARCH x86)
      endif ()
      set (LINUX_SYS "Alpine")
    elseif (EXISTS /etc/photon-release)
      if (${OS_ARCH} STREQUAL "arm64")
	    set (OS_ARCH aarch64)
      endif ()
      set (LINUX_SYS "Photon")
    elseif (EXISTS /etc/centos-release)
      if (${OS_ARCH} STREQUAL "arm64")
	    set (OS_ARCH aarch64)
      endif ()
      set (LINUX_SYS "CentOS")
    elseif (EXISTS /etc/fedora-release)
      if (${OS_ARCH} STREQUAL "arm64")
	set (OS_ARCH aarch64)
      endif ()
      set (LINUX_SYS "Fedora")
    elseif (EXISTS /etc/SuSE-release)
      set (LINUX_SYS "SuSE")
    elseif (EXISTS /etc/debian_version)
      if ("${RELEASE_ID}" MATCHES "ubuntu")
        set (LINUX_SYS "Ubuntu")
      else ()
        set (LINUX_SYS "Debian")
      endif ()
      execute_process (COMMAND dpkg --print-architecture OUTPUT_VARIABLE OS_ARCH OUTPUT_STRIP_TRAILING_WHITESPACE)
    elseif ("${RELEASE_ID}" MATCHES "opensuse-leap")
      if (${OS_ARCH} STREQUAL "arm64")
	    set (OS_ARCH aarch64)
      elseif (${OS_ARCH} STREQUAL "armhf")
	    set (OS_ARCH armv7hl)
      endif ()
      set (LINUX_SYS "SuSE")
    endif ()
  endif ()
endif ()
message (STATUS "IOT ${IOT_DOT_VERSION} for ${CMAKE_SYSTEM_NAME} ${OS_ARCH} ${LINUX_SYS}")

# Build modules

add_subdirectory (c)
if (NOT "${LINUX_SYS}" STREQUAL "AzureSphere")
  add_subdirectory (cpp)
endif ()

# Documentation
add_subdirectory (docs)

# Configure packaging options

if (CMAKE_BUILD_TYPE MATCHES Release OR CMAKE_BUILD_TYPE MATCHES MinSizeRel)
  set (CPACK_PACKAGE_NAME "iotech-iot${PACKAGE_MOD}-${VERSION_MAJOR}.${VERSION_MINOR}")
  set (CPACK_STRIP_FILES "TRUE")
else ()
  set (CPACK_PACKAGE_NAME "iotech-iot-dev${PACKAGE_MOD}-${VERSION_MAJOR}.${VERSION_MINOR}")
  set (CPACK_STRIP_FILES "FALSE")
endif ()
set (CPACK_PACKAGE_VERSION "${IOT_DOT_VERSION}")
set (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}_${OS_ARCH}")
set (CPACK_PACKAGE_VENDOR "IOTech")
set (CPACK_PACKAGE_CONTACT "support@iotechsys.com")
set (CPACK_PACKAGE_DESCRIPTION_SUMMARY "IOT C Framework")
set (CPACK_VERSION_MAJOR "${VERSION_MAJOR}")
set (CPACK_VERSION_MINOR "${VERSION_MINOR}")
set (CPACK_VERSION_PATCH "${VERSION_PATCH}")

include (CPack)
