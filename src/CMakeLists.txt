cmake_minimum_required (VERSION 3.1)
project (IOT LANGUAGES C CXX)
set (CMAKE_C_STANDARD 11)
set (CMAKE_CXX_STANDARD 11)

# Package support

set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)

# Versioning

file (STRINGS ${CMAKE_SOURCE_DIR}/../VERSION IOT_DOT_VERSION)
string (REGEX REPLACE "....$" "" VERSION_MAJOR ${IOT_DOT_VERSION})
string (REGEX REPLACE "..$" "" VERSION_MINOR ${IOT_DOT_VERSION})
string (REGEX REPLACE "^.." "" VERSION_MINOR ${VERSION_MINOR})
string (REGEX REPLACE "^...." "" VERSION_PATCH ${IOT_DOT_VERSION})
message (STATUS "IOT ${IOT_DOT_VERSION} for ${CMAKE_SYSTEM_NAME}")

# Configuration variables
set (IOT_BUILD_COMPONENTS ON CACHE BOOL "Build component support")
set (IOT_BUILD_DYNAMIC_LOAD ON CACHE BOOL "Build dynamic library load support")
set (IOT_BUILD_LCOV OFF CACHE BOOL "Build LCov")

# Configure for different target systems

set (OS_ARCH x86_64)
set (CPACK_GENERATOR TGZ)

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  set (CPACK_GENERATOR ZIP)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
  set (CPACK_GENERATOR TGZ)
else ()
  if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    execute_process (COMMAND uname -m OUTPUT_VARIABLE UNAME_M OUTPUT_STRIP_TRAILING_WHITESPACE)
    if (${UNAME_M} STREQUAL "aarch64")
      set (OS_ARCH arm64)
    elseif (${UNAME_M} STREQUAL "armv7l")
      set (OS_ARCH armhf)
    endif ()
    if (EXISTS /etc/os-release)
      file (STRINGS /etc/os-release RELEASE_ID REGEX "ID=")
      file (STRINGS /etc/os-release RELEASE_VERSION REGEX "VERSION_ID=")
      string (REGEX REPLACE "VERSION_ID=" "" RELEASE_VERSION ${RELEASE_VERSION})
      string (REGEX REPLACE "\"" "" RELEASE_VERSION ${RELEASE_VERSION})
    endif ()
    if (${UNAME_M} STREQUAL "aarch64")
      set (OS_ARCH arm64)
    elseif (${UNAME_M} STREQUAL "armv7l")
      set (OS_ARCH armhf)
    endif ()
    if (EXISTS /etc/alpine-release)
      if (${OS_ARCH} STREQUAL "arm64")
        set (OS_ARCH aarch64)
      elseif (${OS_ARCH} STREQUAL "armhf")
        set (OS_ARCH armv7)
      endif ()
      set (LINUX_SYS "Alpine")
    elseif (EXISTS /etc/photon-release)
      if (${OS_ARCH} STREQUAL "arm64")
	    set (OS_ARCH aarch64)
      endif ()
      set (LINUX_SYS "Photon")
      set (CPACK_GENERATOR RPM)
    elseif (EXISTS /etc/centos-release)
      if (${OS_ARCH} STREQUAL "arm64")
	    set (OS_ARCH aarch64)
      endif ()
      set (LINUX_SYS "CentOS")
      set (CPACK_GENERATOR RPM)
    elseif (EXISTS /etc/fedora-release)
      if (${OS_ARCH} STREQUAL "arm64")
	set (OS_ARCH aarch64)
      endif ()
      set (LINUX_SYS "Fedora")
      set (CPACK_GENERATOR RPM)
    elseif (EXISTS /etc/SuSE-release)
      set (LINUX_SYS "SuSE")
      set (CPACK_GENERATOR RPM)
    elseif (EXISTS /etc/debian_version)
      if ("${RELEASE_ID}" MATCHES "ubuntu")
        set (LINUX_SYS "Ubuntu")
      else ()
        set (LINUX_SYS "Debian")
      endif ()
      set (CPACK_GENERATOR DEB)
    elseif ("${RELEASE_ID}" MATCHES "opensuse")
      if (${OS_ARCH} STREQUAL "arm64")
	set (OS_ARCH aarch64)
      elseif (${OS_ARCH} STREQUAL "armhf")
	set (OS_ARCH armv7hl)
      endif ()
      set (LINUX_SYS "SuSE")
      set (CPACK_GENERATOR RPM)
    endif ()
  endif ()
endif ()

# Build modules

add_subdirectory (c)
add_subdirectory (cpp)

# Documentation
if (CMAKE_BUILD_TYPE MATCHES Release)
  add_subdirectory (docs)
endif ()

# Configure generic installer options

if (CMAKE_BUILD_TYPE MATCHES Release)
  set (CPACK_PACKAGE_NAME "iotech-iot")
  set (CPACK_STRIP_FILES "TRUE")
else ()
  set (CPACK_PACKAGE_NAME "iotech-iot-dev")
  set (CPACK_STRIP_FILES "FALSE")
endif ()
set (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}_${OS_ARCH}")
set (CPACK_PACKAGE_VENDOR "IOTech")
set (CPACK_PACKAGE_CONTACT "support@iotechsys.com")
set (CPACK_PACKAGE_DESCRIPTION_SUMMARY "IOT C Framework")
set (CPACK_PACKAGE_VERSION "${IOT_DOT_VERSION}")
set (CPACK_VERSION_MAJOR "${VERSION_MAJOR}")
set (CPACK_VERSION_MINOR "${VERSION_MINOR}")
set (CPACK_VERSION_PATCH "${VERSION_PATCH}")

if (${CPACK_GENERATOR} STREQUAL "DEB")
  set (CPACK_PACKAGING_INSTALL_PREFIX "/opt/iotech/iot")
  set (CPACK_DEBIAN_PACKAGE_MAINTAINER "Support <support@iotechsys.com>")
  set (CPACK_DEBIAN_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
  set (CPACK_DEBIAN_PACKAGE_SECTION "devel")
  set (CPACK_DEBIAN_PACKAGE_DESCRIPTION "${CPACK_PACKAGE_DESCRIPTION_SUMMARY}")
  set (CPACK_DEBIAN_PACKAGE_DEPENDS "libc6, build-essential, gcc, cmake, make")
  set (CPACK_DEBIAN_PACKAGE_SHLIBS "ON")
elseif (${CPACK_GENERATOR} STREQUAL "RPM")
  set (CPACK_PACKAGING_INSTALL_PREFIX "/opt/iotech/iot")
  set (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.${OS_ARCH}")
  set (CPACK_RPM_PACKAGE_DESCRIPTION "${CPACK_PACKAGE_DESCRIPTION_SUMMARY}")
  set (CPACK_RPM_PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
  set (CPACK_RPM_PACKAGE_ARCHITECTURE ${OS_ARCH})
endif ()

include (CPack)
